// styles:
import "./Create.css";

import { useState } from "react";
import { useFirestore } from "../../hooks/useFirestore";

import Tags from "../../components/tags/Tags";

export default function Create() {
  const { addBlog, error, isPending } = useFirestore("users");
  const [title, setTitle] = useState("");
  const [author, setAuthor] = useState("");
  const [dateStarted, setDateStarted] = useState("");
  const [dateFinished, setDateFinished] = useState("");
  const [tags, setTags] = useState("");
  const [content, setContent] = useState("");

  const handleTags = (e) => {
    if (e.target.checked === true) {
      setTags([...tags, e.target.value]);
    } else {
      let reducedTags = tags.filter((tag) => tag !== e.target.value);
      setTags(reducedTags);
    }
  };

  return (
    <div className="create">
      <h2>Create a New Blog</h2>
      <form id="create-form">
        <div className="form-row">
          <label htmlFor="bookTitle">Title:</label>

          <input
            id="bookTitle"
            name="bookTitle"
            type="text"
            onChange={(e) => setTitle(e.target.value)}
            value={title}
            required="required"
          />
        </div>

        <div className="form-row">
          <label htmlFor="author">Author:</label>
          <input
            id="author"
            name="author"
            type="text"
            onChange={(e) => setAuthor(e.target.value)}
            value={author}
            required="required"
          />
        </div>
        <div className="form-row">
          <label htmlFor="dateStarted">Started:</label>
          <input
            id="dateStarted"
            name="dateStarted"
            type="date"
            min="1992-11-16"
            max="2092-11-16"
            onChange={(e) => setDateStarted(e.target.value)}
            value={dateStarted}
          />
        </div>

        <div className="form-row">
          <label htmlFor="dateFinished">Finished:</label>
          <input
            id="dateFinished"
            name="dateFinished"
            type="date"
            min="1992-11-16"
            max="2092-11-16"
            onChange={(e) => setDateFinished(e.target.value)}
            value={dateFinished}
          />
        </div>

        <Tags handleTags={handleTags}/>

        {/* <div className="form-row-full">
          <fieldset>
            <legend>Tags:</legend>
            <div className="tag-option">
              <input type="checkbox" id="sci-fi" name="tags" value="Sci-fi" />
              <label htmlFor="sci-fi">Sci-fi</label>
            </div>
            <div className="tag-option">
              <input type="checkbox" id="fantasy" name="tags" value="Fantasy" />
              <label htmlFor="fantasy">Fantasy</label>
            </div>
            <div className="tag-option">
              <input
                type="checkbox"
                id="informative"
                name="tags"
                value="Informative"
              />
              <label htmlFor="informative">Informative</label>
            </div>
            <div className="tag-option">
              <input type="checkbox" id="fiction" name="tags" value="Fiction" />
              <label htmlFor="fiction">Fiction</label>
            </div>
            <div className="tag-option">
              <input
                type="checkbox"
                id="short-story"
                name="tags"
                value="Short Story"
              />
              <label htmlFor="short-story">Short Story</label>
            </div>
            <div className="tag-option">
              <input
                type="checkbox"
                id="non-fiction"
                name="tags"
                value="Non-fiction"
              />
              <label htmlFor="non-fiction">Non-Fiction</label>
            </div>
            <div className="tag-option">
              <input
                type="checkbox"
                id="biography"
                name="tags"
                value="Biography"
              />
              <label htmlFor="biography">Biography</label>
            </div>
            <div className="tag-option">
              <input
                type="checkbox"
                id="classical"
                name="tags"
                value="Classical"
              />
              <label htmlFor="classical">Classical</label>
            </div>
            <div className="tag-option">
              <input type="checkbox" id="comedy" name="tags" value="Comedy" />
              <label htmlFor="comedy">Comedy</label>
            </div>
            <div className="tag-option">
              <input type="checkbox" id="horror" name="tags" value="Horror" />
              <label htmlFor="horror">Horror</label>
            </div>
          </fieldset>
        </div> */}

        <div className="form-row-full">
          <label htmlFor="blogContent">Thoughts on the Book:</label>
        </div>

        <textarea id="blogContent" name="blogContent"></textarea>
      </form>
      <button form="create-form">Post!</button>
    </div>
  );
}


/////////////////////////////////


import "./Home.css";

import { Link } from "react-router-dom";

import EditButton from "../../assets/EditButton";

export default function BlogCard({ blogs }) {
  const generateNewLines = (blog) => {
    const reg = /\n/;
    let blogSnippet = [];
    blogSnippet.push(blog.content.split(reg));

    return blogSnippet;
  };

  return (
    <>
      {blogs.map((blog) => (
        <div key={blog.title} className="content-box">
          <div className="top-container">
            <div className="card-col card-col-1">
              <div className="card-line title-line">
                <Link className="title" to="#">
                  <h1 className="title">{blog.title}</h1>
                </Link>

                <Link to="#">
                  <EditButton className="edit" />
                </Link>
              </div>

              {blog.author && (
                <div className="card-line author-line">
                  <p className="author">
                    by
                    <Link className="authorLink" to="#">
                      {blog.author}
                    </Link>
                  </p>

                  <Link to="#">
                    <EditButton className="edit" />
                  </Link>
                </div>
              )}

              {blog.dateStarted && (
                <div className="card-line date-space">
                  <div className="dateStarted">
                    <p className="date-label">Started:</p>
                    <p className="date-value">{blog.dateStarted}</p>
                  </div>

                  <div className="dateFinished">
                    <p className="date-label">Finished:</p>
                    <div className="date-value">
                      {blog.dateFinished === "" ? (
                        <p>Currently Reading</p>
                      ) : (
                        <p>{blog.dateFinished}</p>
                      )}
                    </div>
                  </div>
                </div>
              )}

              {blog.tags && (
                <div className="card-line tags">
                  <p className="tags-label">Tags:</p>
                  {blog.tags.length === 0 ? (
                    <p className="tags-value">No Tags.</p>
                  ) : (
                    blog.tags.map((tag) => (
                      <p>
                        <Link to="#">{tag}</Link>
                      </p>
                    ))
                  )}
                </div>
              )}
            </div>

            {/* {blog.image && (
              <div className="card-col card-col-2">
                <img
                  className="card-image"
                  src="./images/test-image-opt.svg"
                  alt="Some stylized purple outlined trees on a dark landscape."
                />
              </div>
            )} */}
          </div>

          {/* {blog.content && (
            <div className="card-line-full">
              <div className="blog-snippet">
                {generateNewLines(blog.content).map((line) => (
                  <p className="snips">{line}</p>
                ))}
              </div>
            </div>
          )} */}
        </div>
      ))}
    </>
  );
}


/////////////

 const examineUpdate = async (updatedData) => {
    try {
      // checkIfAuthorExists retrieves the authorDoc if author exists
      // else it returns a freshly made authorDoc
      const authorDocRef = await checkIfAuthorExists(updatedData);
      let prevAuthorID = updatedData.authorID;
      let updatedAuthorID = authorDocRef.id;

      const { docRef: blogDocRef, docData: blogDocData } =
        await getDocRefOrData(blogsCollection, updatedData.id);
      const { docRef: prevKeyDocRef, docData: prevKeyDocData } =
        await getDocRefOrData(keysCollection, prevAuthorID);

      let prevKeyTitle = { [blogDocData.title]: blogDocRef.id };

      let didTitleChange = blogDocData.title !== updatedData.title;
      let didAuthorChange = blogDocData.author !== updatedData.author;

      switch (didTitleChange) {
        case true:
          switch (didAuthorChange) {
            case true:
              console.log("Author name has been changed.");
              changeAuthorName(
                authorDocRef,
                updatedData,
                blogDocData,
                blogDocRef
              );
              changeKeyData(updatedData, authorDocRef, blogDocData, blogDocRef);
              break;
            case false:
              console.log("Author name has NOT been changed.");

              const updatedBlog = await updateDoc(blogDocRef, updatedData);
              dispatchIfNotCancelled({
                type: "UPDATED_BLOG",
                payload: updatedBlog,
              });

              let updatedAuthor = await updateDoc(authorDocRef, {
                booksWritten: arrayRemove(blogDocData.title),
              });
              updatedAuthor = await updateDoc(authorDocRef, {
                booksWritten: arrayUnion(updatedData.title),
              });
              dispatchIfNotCancelled({
                type: "UPDATED_AUTHOR",
                payload: updatedAuthor,
              });
              break;
            default:
              console.log("Something went wrong");
          }
          break;
        case false:
          switch (didAuthorChange) {
            case true:
              console.log("Book title has NOT been changed.");
              // Condition 3: Title DOES NOT Change & Author Name Changes:
              if (blogDocData.author !== updatedData.author) {
                console.log("Author name has been changed.");
                changeAuthorName(
                  authorDocRef,
                  updatedData,
                  blogDocData,
                  blogDocRef
                );
              }
              break;
            case false:
              // Condition 4: Title DOES NOT Change & Author Name DOES NOT Change:
              console.log("Author name has NOT been changed.");
              const updatedBlog = await updateDoc(blogDocRef, updatedData);
              dispatchIfNotCancelled({
                type: "UPDATED_BLOG",
                payload: updatedBlog,
              });
              break;
            default:
              console.log("Something went wrong");
          }
          break;
        default:
          console.log("Something went wrong");
      }
    } catch (err) {
      dispatchIfNotCancelled({ type: "ERROR", payload: err.message });
    }
  };

  ------------------------
  
  // const changeKeyData = async (prevKeyDocRef, prevKeyDocData, prevKeyTitle) => {

  //   // let updatedAuthorID = authorDocRef.id;
  //   // let prevAuthorID = updatedData.authorID;
  //   // let prevKeyTitle = { [blogDocData.title]: blogDocRef.id }

  //   // // previous key doc:
  //   // const prevKeyDocRef = doc(keysCollection, prevAuthorID)
  //   // const prevKeyDocSnap = await getDoc(prevKeyDocRef)
  //   // const prevKeyDocData = prevKeyDocSnap.data();

  //   // Condition 3a: author has written multiple books
  //   if (prevKeyDocData.booksWithIDs.length > 1) {
  //     let updatedPrevKey = await updateDoc(prevKeyDocRef, {
  //       booksWithIDs: arrayRemove(prevKeyTitle),
  //     });
  //     dispatchIfNotCancelled({
  //       type: "UPDATED_KEY",
  //       payload: updatedPrevKey,
  //     });
  //   }
  //   // Condition 3b: author has only written the book being edited
  //   else {
  //     await deleteDoc(prevKeyDocRef);
  //   }
  // };

  ------------------

import { useReducer, useEffect, useState } from "react";
import { useAuthContext } from "./useAuthContext";
import { db } from "../firebase/config";

// firebase imports:
import {
  collection,
  doc,
  getDocs,
  getDoc,
  addDoc,
  setDoc,
  updateDoc,
  arrayUnion,
  deleteDoc,
  query,
  where,
  limit,
  arrayRemove,
} from "firebase/firestore";

let initialState = {
  document: null,
  isPending: false,
  error: null,
  success: null,
};

const firestoreReducer = (state, action) => {
  switch (action.type) {
    case "IS_PENDING":
      return { isPending: true, document: null, success: false, error: null };
    case "ADDED_BLOG":
      return {
        isPending: false,
        document: action.payload,
        success: true,
        error: null,
      };
    case "ADDED_AUTHOR":
      return {
        isPending: false,
        document: action.payload,
        success: true,
        error: null,
      };
    case "ADDED_KEY":
      return {
        isPending: false,
        document: action.payload,
        success: true,
        error: null,
      };
    case "UPDATED_BLOG":
      return {
        isPending: false,
        document: action.payload,
        success: true,
        error: null,
      };
    case "UPDATED_AUTHOR":
      return {
        isPending: false,
        document: action.payload,
        success: true,
        error: null,
      };
    case "DELETED_BLOG":
      return {
        isPending: true,
        document: null,
        success: action.payload,
        error: null,
      };
    case "ERROR":
      return {
        isPending: false,
        document: null,
        success: false,
        error: action.payload,
      };
    default:
      return state;
  }
};

export const useFirestore = () => {
  const { user } = useAuthContext();

  const [response, dispatch] = useReducer(firestoreReducer, initialState);
  const [isCancelled, setIsCancelled] = useState(false);

  const usersDoc = doc(db, "users", user.uid);
  const blogsCollection = collection(usersDoc, "blogs");
  const authorsCollection = collection(usersDoc, "authors");
  const keysCollection = collection(usersDoc, "keys");

  const dispatchIfNotCancelled = (action) => {
    if (!isCancelled) {
      dispatch(action);
    }
  };

  const locateDoc = async (collection, queryRules) => {
    let q = query(collection, where(...queryRules), limit(1));
    const doc = await getDocs(q, limit(1));
    return doc;
  };

  const getDocRefOrData = async (coll, id) => {
    const docRef = doc(coll, id);
    const docSnap = await getDoc(docRef);
    const docData = docSnap.data();
    return {
      docRef,
      docData,
    };
  };

  const checkIfAuthorExists = async (blog) => {
    dispatch({ type: "IS_PENDING" });

    try {
      let isNewAuthor;
      let authorDocRef;
      let queryRules = ["name", "==", blog.author];
      const authorDoc = await locateDoc(authorsCollection, queryRules);

      // update authorDoc & return updated authorDocRef
      if (authorDoc.docs.length > 0) {
        console.log("author exists");
        isNewAuthor = false;

        const authorDocID = authorDoc.docs[0].id;
        authorDocRef = doc(authorsCollection, authorDocID);

        await updateAuthor(authorDocRef, blog);
      }
      // add authorDoc & return new authorDocRef
      else {
        console.log("author does not exist");
        isNewAuthor = true;

        authorDocRef = await addAuthor(blog);
        console.log(authorDocRef);
      }
      return { isNewAuthor, authorDocRef };
    } catch (err) {
      dispatchIfNotCancelled({ type: "ERROR", payload: err.message });
    }
  };

  const checkIfKeyExists = async (blog, blogDocRef, authorDocRef) => {
    dispatch({ type: "IS_PENDING" });

    const authorDocID = authorDocRef.id;
    const authorDocSnap = await getDoc(authorDocRef);
    const authorDocData = authorDocSnap.data();

    try {
      let booksWithIDs = { [blog.title]: blogDocRef.id };

      let queryRules = ["author", "==", authorDocData.name];
      const keyDoc = await locateDoc(keysCollection, queryRules);

      if (keyDoc.docs.length > 0) {
        console.log("key exists");
        const keyDocID = keyDoc.docs[0].id;
        const keyDocRef = doc(keysCollection, keyDocID);

        await updateKey(keyDocRef, booksWithIDs);
      } else {
        console.log("key does NOT exist");
        await setKey(authorDocID, authorDocData, booksWithIDs);
      }
    } catch (err) {
      dispatchIfNotCancelled({ type: "ERROR", payload: err.message });
    }
  };

  // add a document
  const addBlog = async (blog) => {
    dispatch({ type: "IS_PENDING" });

    try {
      const addedBlog = await addDoc(blogsCollection, {
        ...blog,
      });

      dispatchIfNotCancelled({
        type: "ADDED_BLOG",
        payload: addedBlog,
      });
      return addedBlog;
    } catch (err) {
      dispatchIfNotCancelled({ type: "ERROR", payload: err.message });
    }
  };

  const addAuthor = async (blog) => {
    dispatch({ type: "IS_PENDING" });

    let author = {
      name: blog.author,
      aboutAuthor: "",
      booksWritten: [blog.title],
    };

    try {
      const addedAuthor = await addDoc(authorsCollection, { ...author });

      dispatchIfNotCancelled({
        type: "ADDED_AUTHOR",
        payload: addedAuthor,
      });
      return addedAuthor;
    } catch (err) {
      dispatchIfNotCancelled({ type: "ERROR", payload: err.message });
    }
  };

  const setKey = async (authorDocID, authorDocData, booksWithIDs) => {
    dispatch({ type: "IS_PENDING" });

    let key = {
      author: authorDocData.name,
      authorID: authorDocID,
      aboutAuthor: authorDocData.aboutAuthor,
      booksWithIDs: [booksWithIDs],
    };
    try {
      console.log(key);
      const addedKey = await setDoc(doc(usersDoc, "keys", authorDocID), {
        ...key,
      });

      dispatchIfNotCancelled({
        type: "ADDED_KEY",
        payload: addedKey,
      });
      return addedKey;
    } catch (err) {
      dispatchIfNotCancelled({ type: "ERROR", payload: err.message });
    }
  };

  const updateKey = async (keyDocRef, booksWithIDs) => {
    try {
      const updatedKey = await updateDoc(
        keyDocRef,
        { booksWithIDs: arrayUnion(booksWithIDs) },
        { merge: true }
      );

      dispatchIfNotCancelled({
        type: "UPDATED_KEY",
        payload: updatedKey,
      });
      return keyDocRef;
    } catch (err) {
      dispatchIfNotCancelled({ type: "ERROR", payload: err.message });
    }
  };

  const updateAuthor = async (authorDocRef, blog) => {
    try {
      const updatedAuthor = await updateDoc(
        authorDocRef,
        { booksWritten: arrayUnion(blog.title) },
        { merge: true }
      );

      dispatchIfNotCancelled({
        type: "UPDATED_AUTHOR",
        payload: updatedAuthor,
      });
      return authorDocRef;
    } catch (err) {
      dispatchIfNotCancelled({ type: "ERROR", payload: err.message });
    }
  };

  const updateData = async (updatedData) => {
    try {
      const { isNewAuthor, authorDocRef } = await checkIfAuthorExists(
        updatedData
      );

      let prevAuthorID = updatedData.authorID;
      let updatedAuthorID = authorDocRef.id;

      const { docRef: prevBlogDocRef, docData: prevBlogDocData } =
        await getDocRefOrData(blogsCollection, updatedData.id);

      const { docData: authorDocData } = await getDocRefOrData(
        authorsCollection,
        updatedAuthorID
      );
      console.log(authorDocData);

      const { docRef: prevKeyDocRef, docData: prevKeyDocData } =
        await getDocRefOrData(keysCollection, prevAuthorID);

      let prevKeyTitle = { [prevBlogDocData.title]: prevBlogDocRef.id };
      let newKeyTitle = { [updatedData.title]: prevBlogDocRef.id };

      if (prevBlogDocData.title !== updatedData.title) {
        console.log("Book title has been changed.");

        // Condition 1: Title Changes & Author Name Changes:
        if (prevBlogDocData.author !== updatedData.author) {
          console.log("Author name has been changed.");
          changeAuthorName(
            authorDocRef,
            updatedData,
            prevBlogDocData,
            prevBlogDocRef
          );
          changeKeyData(
            prevKeyDocRef,
            prevKeyDocData,
            prevKeyTitle,
            newKeyTitle
          );
        }
        // Condition 2: Title Changes & Author Name DOES NOT Change:
        else {
          console.log("Author name has NOT been changed.");

          const updatedBlog = await updateDoc(prevBlogDocRef, updatedData);
          dispatchIfNotCancelled({
            type: "UPDATED_BLOG",
            payload: updatedBlog,
          });

          let updatedAuthor = await updateDoc(authorDocRef, {
            booksWritten: arrayRemove(prevBlogDocData.title),
          });
          updatedAuthor = await updateDoc(authorDocRef, {
            booksWritten: arrayUnion(updatedData.title),
          });
          dispatchIfNotCancelled({
            type: "UPDATED_AUTHOR",
            payload: updatedAuthor,
          });

          let updatedKey = await updateDoc(prevKeyDocRef, {
            booksWithIDs: arrayRemove(prevKeyTitle),
          });
          updatedKey = await updateDoc(prevKeyDocRef, {
            booksWithIDs: arrayUnion(newKeyTitle),
          });
          dispatchIfNotCancelled({
            type: "UPDATED_KEY",
            payload: updatedKey,
          });
        }
      } else {
        console.log("Book title has NOT been changed.");
        // Condition 3: Title DOES NOT Change & Author Name Changes:
        if (prevBlogDocData.author !== updatedData.author) {
          console.log("Author name has been changed.");
          console.log(`Is this new author?: ${isNewAuthor}`);
          changeAuthorName(
            authorDocRef,
            updatedData,
            prevBlogDocData,
            prevBlogDocRef,
            authorDocRef,
            authorDocData,
            isNewAuthor
          );
        }

        // Condition 4: Title DOES NOT Change & Author Name DOES NOT Change:
        else {
          console.log("Author name has NOT been changed.");
          const updatedBlog = await updateDoc(prevBlogDocRef, updatedData);
          dispatchIfNotCancelled({
            type: "UPDATED_BLOG",
            payload: updatedBlog,
          });
        }
      }
    } catch (err) {
      dispatchIfNotCancelled({ type: "ERROR", payload: err.message });
    }
  };

  const changeKeyData = async (
    prevKeyDocRef,
    prevKeyDocData,
    prevKeyTitle,
    newKeyTitle,
    updatedData,
    updatedAuthorID,
    authorDocData
  ) => {
    // Condition 3a: is this a new author:
    let isNewAuthor = null;
    let queryRules = ["author", "==", updatedData.author];
    const existingKeyDoc = await locateDoc(keysCollection, queryRules);

    if (existingKeyDoc.docs.length > 0) {
      isNewAuthor = false;
      const { docRef: existingKeyDocRef } = getDocRefOrData(
        existingKeyDoc.docs[0].id
      );
      let updatedKey = await updateDoc(existingKeyDocRef, {
        booksWithIDs: arrayUnion(prevKeyTitle),
      });
    } else {
      isNewAuthor = true;
      let newKey = await setKey(updatedAuthorID, authorDocData, newKeyTitle);
    }
    // Condition 3b: author has written multiple books
    // delete previous key because either authorName changed or title changed
    if (prevKeyDocData.booksWithIDs.length > 1) {
      let updatedPrevKey = await updateDoc(prevKeyDocRef, {
        booksWithIDs: arrayRemove(prevKeyTitle),
      });
      dispatchIfNotCancelled({
        type: "UPDATED_KEY",
        payload: updatedPrevKey,
      });
    }
    // Condition 3b: author has only written the book being edited
    else {
      await deleteDoc(prevKeyDocRef);
    }
  };

  const changeAuthorName = async (
    authorDocRef,
    updatedData,
    prevBlogDocData,
    prevBlogDocRef,
    prevAuthorDocRef,
    prevAuthorDocData
  ) => {
    let updatedAuthorID = authorDocRef.id;

    // Condition 3a: is this a new author:
    let isNewAuthor = null;
    let queryRules = ["name", "==", updatedData.author];
    const existingAuthorDoc = await locateDoc(authorsCollection, queryRules);

    if (existingAuthorDoc.docs.length > 0) {
      console.log("hey");
      isNewAuthor = false;
      const existingAuthorDocID = existingAuthorDoc.docs[0].id;
      const existingAuthorDocRef = doc(authorsCollection, existingAuthorDocID);
      let updatedAuthor = await updateDoc(existingAuthorDocRef, {
        booksWritten: arrayUnion(prevBlogDocData.title),
      });
    }
    // else {
    //   isNewAuthor = true;
    //   let newAuthor = await setKey(updatedAuthorID, authorDocData, newKeyTitle);
    // }
    // Condition 3a: author has written multiple books
    console.log(prevAuthorDocData);
    if (prevAuthorDocData.booksWritten.length > 1) {
      let updatedPrevAuthor = await updateDoc(prevAuthorDocRef, {
        booksWritten: arrayRemove(prevBlogDocData.title),
      });
      dispatchIfNotCancelled({
        type: "UPDATED_AUTHOR",
        payload: updatedPrevAuthor,
      });
    }
    // Condition 3b: author has only written the book being edited
    else {
      await deleteDoc(prevAuthorDocRef);
    }

    // give blog doc new authorID:
    const updatedBlog = await updateDoc(prevBlogDocRef, {
      ...updatedData,
      authorID: updatedAuthorID,
    });
    dispatchIfNotCancelled({
      type: "UPDATED_BLOG",
      payload: updatedBlog,
    });
  };

  const deleteBlog = async (blog) => {
    dispatch({ type: "IS_PENDING" });
    console.log(response);
    const blogDoc = doc(blogsCollection, blog.id);

    try {
      await deleteDoc(blogDoc);

      dispatchIfNotCancelled({
        type: "DELETED_BLOG",
        payload: true,
      });
    } catch (err) {
      dispatchIfNotCancelled({ type: "ERROR", payload: err.message });
    }
  };

  useEffect(() => {
    return () => setIsCancelled(true);
  }, []);

  return {
    checkIfAuthorExists,
    checkIfKeyExists,
    addBlog,
    addAuthor,
    updateData,
    deleteBlog,
    response,
    dispatch,
    dispatchIfNotCancelled,
  };
};

  ------------------

    const changeAuthorName = async (
    authorDocRef,
    updatedData,
    blogDocData,
    blogDocRef,
    prevAuthorDocRef,
    prevAuthorDocData
  ) => {
    let updatedAuthorID = authorDocRef.id;

    // const prevAuthorDocRef = doc(authorsCollection, updatedData.authorID);
    // const prevAuthorDocSnap = await getDoc(prevAuthorDocRef);
    // const prevAuthorDocData = prevAuthorDocSnap.data();

    // Condition 3a: author has written multiple books
    console.log(prevAuthorDocData);
    if (prevAuthorDocData.booksWritten.length > 1) {
      let updatedPrevAuthor = await updateDoc(prevAuthorDocRef, {
        booksWritten: arrayRemove(blogDocData.title),
      });
      dispatchIfNotCancelled({
        type: "UPDATED_AUTHOR",
        payload: updatedPrevAuthor,
      });
    }
    // Condition 3b: author has only written the book being edited
    else {
      await deleteDoc(prevAuthorDocRef);
    }

    // give blog doc new authorID:
    const updatedBlog = await updateDoc(blogDocRef, {
      ...updatedData,
      authorID: updatedAuthorID,
    });
    dispatchIfNotCancelled({
      type: "UPDATED_BLOG",
      payload: updatedBlog,
    });
  };

-----------------

  const checkIfAuthorExists = async (blog) => {
    dispatch({ type: "IS_PENDING" });

    try {
      let queryRules = ["name", "==", blog.author];
      const authorDoc = await locateDoc(authorsCollection, queryRules);

      // update authorDoc & return updated authorDocRef
      if (authorDoc.docs.length > 0) {
        console.log("author exists");

        const authorDocID = authorDoc.docs[0].id;
        const authorDocRef = doc(authorsCollection, authorDocID);

        await updateAuthor(authorDocRef, blog);
        return authorDocRef;
      }
      // add authorDoc & return new authorDocRef
      else {
        console.log("author does not exist");

        const authorDocRef = await addAuthor(blog);
        console.log(authorDocRef);
        return authorDocRef;
      }
    } catch (err) {
      dispatchIfNotCancelled({ type: "ERROR", payload: err.message });
    }
  };

/////////////
Condition 1: Title Changes & Author Name Changes:
  1. Is this a newAuthor?
    Yes - 
      newAuthor generates newKey with newAuthorID ->
        newAuthorName
        newAuthorID
        prevAboutAuthor ???
        [{newBookTitle: newBookID}] 
    No - 
      add newKeyData to existingAuthorKey with existingAuthorKeyID ->
        arrayUnion([{newBookTitle: newBookID}])
        confirm: merge prevAboutAuthor with existingAboutAuthor?
          Yes - 
            merge prevAboutAuthor with existingAboutAuthor
          No - 
            do not merge prevAboutAuthor data
  2. Was prevBookTitle the only book prevAuthor wrote?
    Yes -
      delete prevKey
    No -
      arrayRemove(prevKey)

Condition 2: Title Changes & Author Name DOES NOT Change:
  1. replace prevKey data
    arrayRemove( [{prevBookTitle: prevBookID}] )
    arrayUnion([{newBookTitle: prevBookID}])
Condition 3: Title DOES NOT Change & Author Name Changes:
  1. Is this a newAuthor?
    Yes - 
      newAuthor generates newKey with newAuthorID ->
        newAuthorName
        newAuthorID
        [{prevBookTitle: prevBookID}] 

        confirm: keep prevAboutAuthor with newAboutAuthor? 
          Yes - 
            add prevAboutAuthor
          No -
            add empty string
    No - 
      add newKeyData to existingAuthorKey with existingAuthorKeyID ->
        arrayUnion([{prevBookTitle: prevBookID}])
        confirm: merge prevAboutAuthor with existingAboutAuthor?
          Yes - 
            merge prevAboutAuthor with existingAboutAuthor
          No - 
            do not merge prevAboutAuthor data
  2. Was prevBookTitle the only book prevAuthor wrote?
    Yes -
      delete prevKey
    No -
      arrayRemove(prevKey)
Condition 4: Title DOES NOT Change & Author Name DOES NOT Change:
  if aboutAuthor changed, 
    add to newKeyData
  else 
    do nothing