// styles:
import "./Create.css";

import { useState } from "react";
import { useFirestore } from "../../hooks/useFirestore";

import Tags from "../../components/tags/Tags";

export default function Create() {
  const { addBlog, error, isPending } = useFirestore("users");
  const [title, setTitle] = useState("");
  const [author, setAuthor] = useState("");
  const [dateStarted, setDateStarted] = useState("");
  const [dateFinished, setDateFinished] = useState("");
  const [tags, setTags] = useState("");
  const [content, setContent] = useState("");

  const handleTags = (e) => {
    if (e.target.checked === true) {
      setTags([...tags, e.target.value]);
    } else {
      let reducedTags = tags.filter((tag) => tag !== e.target.value);
      setTags(reducedTags);
    }
  };

  return (
    <div className="create">
      <h2>Create a New Blog</h2>
      <form id="create-form">
        <div className="form-row">
          <label htmlFor="bookTitle">Title:</label>

          <input
            id="bookTitle"
            name="bookTitle"
            type="text"
            onChange={(e) => setTitle(e.target.value)}
            value={title}
            required="required"
          />
        </div>

        <div className="form-row">
          <label htmlFor="author">Author:</label>
          <input
            id="author"
            name="author"
            type="text"
            onChange={(e) => setAuthor(e.target.value)}
            value={author}
            required="required"
          />
        </div>
        <div className="form-row">
          <label htmlFor="dateStarted">Started:</label>
          <input
            id="dateStarted"
            name="dateStarted"
            type="date"
            min="1992-11-16"
            max="2092-11-16"
            onChange={(e) => setDateStarted(e.target.value)}
            value={dateStarted}
          />
        </div>

        <div className="form-row">
          <label htmlFor="dateFinished">Finished:</label>
          <input
            id="dateFinished"
            name="dateFinished"
            type="date"
            min="1992-11-16"
            max="2092-11-16"
            onChange={(e) => setDateFinished(e.target.value)}
            value={dateFinished}
          />
        </div>

        <Tags handleTags={handleTags}/>

        {/* <div className="form-row-full">
          <fieldset>
            <legend>Tags:</legend>
            <div className="tag-option">
              <input type="checkbox" id="sci-fi" name="tags" value="Sci-fi" />
              <label htmlFor="sci-fi">Sci-fi</label>
            </div>
            <div className="tag-option">
              <input type="checkbox" id="fantasy" name="tags" value="Fantasy" />
              <label htmlFor="fantasy">Fantasy</label>
            </div>
            <div className="tag-option">
              <input
                type="checkbox"
                id="informative"
                name="tags"
                value="Informative"
              />
              <label htmlFor="informative">Informative</label>
            </div>
            <div className="tag-option">
              <input type="checkbox" id="fiction" name="tags" value="Fiction" />
              <label htmlFor="fiction">Fiction</label>
            </div>
            <div className="tag-option">
              <input
                type="checkbox"
                id="short-story"
                name="tags"
                value="Short Story"
              />
              <label htmlFor="short-story">Short Story</label>
            </div>
            <div className="tag-option">
              <input
                type="checkbox"
                id="non-fiction"
                name="tags"
                value="Non-fiction"
              />
              <label htmlFor="non-fiction">Non-Fiction</label>
            </div>
            <div className="tag-option">
              <input
                type="checkbox"
                id="biography"
                name="tags"
                value="Biography"
              />
              <label htmlFor="biography">Biography</label>
            </div>
            <div className="tag-option">
              <input
                type="checkbox"
                id="classical"
                name="tags"
                value="Classical"
              />
              <label htmlFor="classical">Classical</label>
            </div>
            <div className="tag-option">
              <input type="checkbox" id="comedy" name="tags" value="Comedy" />
              <label htmlFor="comedy">Comedy</label>
            </div>
            <div className="tag-option">
              <input type="checkbox" id="horror" name="tags" value="Horror" />
              <label htmlFor="horror">Horror</label>
            </div>
          </fieldset>
        </div> */}

        <div className="form-row-full">
          <label htmlFor="blogContent">Thoughts on the Book:</label>
        </div>

        <textarea id="blogContent" name="blogContent"></textarea>
      </form>
      <button form="create-form">Post!</button>
    </div>
  );
}


/////////////////////////////////


import "./Home.css";

import { Link } from "react-router-dom";

import EditButton from "../../assets/EditButton";

export default function BlogCard({ blogs }) {
  const generateNewLines = (blog) => {
    const reg = /\n/;
    let blogSnippet = [];
    blogSnippet.push(blog.content.split(reg));

    return blogSnippet;
  };

  return (
    <>
      {blogs.map((blog) => (
        <div key={blog.title} className="content-box">
          <div className="top-container">
            <div className="card-col card-col-1">
              <div className="card-line title-line">
                <Link className="title" to="#">
                  <h1 className="title">{blog.title}</h1>
                </Link>

                <Link to="#">
                  <EditButton className="edit" />
                </Link>
              </div>

              {blog.author && (
                <div className="card-line author-line">
                  <p className="author">
                    by
                    <Link className="authorLink" to="#">
                      {blog.author}
                    </Link>
                  </p>

                  <Link to="#">
                    <EditButton className="edit" />
                  </Link>
                </div>
              )}

              {blog.dateStarted && (
                <div className="card-line date-space">
                  <div className="dateStarted">
                    <p className="date-label">Started:</p>
                    <p className="date-value">{blog.dateStarted}</p>
                  </div>

                  <div className="dateFinished">
                    <p className="date-label">Finished:</p>
                    <div className="date-value">
                      {blog.dateFinished === "" ? (
                        <p>Currently Reading</p>
                      ) : (
                        <p>{blog.dateFinished}</p>
                      )}
                    </div>
                  </div>
                </div>
              )}

              {blog.tags && (
                <div className="card-line tags">
                  <p className="tags-label">Tags:</p>
                  {blog.tags.length === 0 ? (
                    <p className="tags-value">No Tags.</p>
                  ) : (
                    blog.tags.map((tag) => (
                      <p>
                        <Link to="#">{tag}</Link>
                      </p>
                    ))
                  )}
                </div>
              )}
            </div>

            {/* {blog.image && (
              <div className="card-col card-col-2">
                <img
                  className="card-image"
                  src="./images/test-image-opt.svg"
                  alt="Some stylized purple outlined trees on a dark landscape."
                />
              </div>
            )} */}
          </div>

          {/* {blog.content && (
            <div className="card-line-full">
              <div className="blog-snippet">
                {generateNewLines(blog.content).map((line) => (
                  <p className="snips">{line}</p>
                ))}
              </div>
            </div>
          )} */}
        </div>
      ))}
    </>
  );
}


/////////////

 const examineUpdate = async (updatedData) => {
    try {
      // checkIfAuthorExists retrieves the authorDoc if author exists
      // else it returns a freshly made authorDoc
      const authorDocRef = await checkIfAuthorExists(updatedData);
      let prevAuthorID = updatedData.authorID;
      let updatedAuthorID = authorDocRef.id;

      const { docRef: blogDocRef, docData: blogDocData } =
        await getDocRefOrData(blogsCollection, updatedData.id);
      const { docRef: prevKeyDocRef, docData: prevKeyDocData } =
        await getDocRefOrData(keysCollection, prevAuthorID);

      let prevKeyTitle = { [blogDocData.title]: blogDocRef.id };

      let didTitleChange = blogDocData.title !== updatedData.title;
      let didAuthorChange = blogDocData.author !== updatedData.author;

      switch (didTitleChange) {
        case true:
          switch (didAuthorChange) {
            case true:
              console.log("Author name has been changed.");
              changeAuthorName(
                authorDocRef,
                updatedData,
                blogDocData,
                blogDocRef
              );
              changeKeyData(updatedData, authorDocRef, blogDocData, blogDocRef);
              break;
            case false:
              console.log("Author name has NOT been changed.");

              const updatedBlog = await updateDoc(blogDocRef, updatedData);
              dispatchIfNotCancelled({
                type: "UPDATED_BLOG",
                payload: updatedBlog,
              });

              let updatedAuthor = await updateDoc(authorDocRef, {
                booksWritten: arrayRemove(blogDocData.title),
              });
              updatedAuthor = await updateDoc(authorDocRef, {
                booksWritten: arrayUnion(updatedData.title),
              });
              dispatchIfNotCancelled({
                type: "UPDATED_AUTHOR",
                payload: updatedAuthor,
              });
              break;
            default:
              console.log("Something went wrong");
          }
          break;
        case false:
          switch (didAuthorChange) {
            case true:
              console.log("Book title has NOT been changed.");
              // Condition 3: Title DOES NOT Change & Author Name Changes:
              if (blogDocData.author !== updatedData.author) {
                console.log("Author name has been changed.");
                changeAuthorName(
                  authorDocRef,
                  updatedData,
                  blogDocData,
                  blogDocRef
                );
              }
              break;
            case false:
              // Condition 4: Title DOES NOT Change & Author Name DOES NOT Change:
              console.log("Author name has NOT been changed.");
              const updatedBlog = await updateDoc(blogDocRef, updatedData);
              dispatchIfNotCancelled({
                type: "UPDATED_BLOG",
                payload: updatedBlog,
              });
              break;
            default:
              console.log("Something went wrong");
          }
          break;
        default:
          console.log("Something went wrong");
      }
    } catch (err) {
      dispatchIfNotCancelled({ type: "ERROR", payload: err.message });
    }
  };

  ------------------------
  
  // const changeKeyData = async (prevKeyDocRef, prevKeyDocData, prevKeyTitle) => {

  //   // let updatedAuthorID = authorDocRef.id;
  //   // let prevAuthorID = updatedData.authorID;
  //   // let prevKeyTitle = { [blogDocData.title]: blogDocRef.id }

  //   // // previous key doc:
  //   // const prevKeyDocRef = doc(keysCollection, prevAuthorID)
  //   // const prevKeyDocSnap = await getDoc(prevKeyDocRef)
  //   // const prevKeyDocData = prevKeyDocSnap.data();

  //   // Condition 3a: author has written multiple books
  //   if (prevKeyDocData.booksWithIDs.length > 1) {
  //     let updatedPrevKey = await updateDoc(prevKeyDocRef, {
  //       booksWithIDs: arrayRemove(prevKeyTitle),
  //     });
  //     dispatchIfNotCancelled({
  //       type: "UPDATED_KEY",
  //       payload: updatedPrevKey,
  //     });
  //   }
  //   // Condition 3b: author has only written the book being edited
  //   else {
  //     await deleteDoc(prevKeyDocRef);
  //   }
  // };

  ------------------

import { useReducer, useEffect, useState } from "react";
import { useAuthContext } from "./useAuthContext";
import { db } from "../firebase/config";

// firebase imports:
import {
  collection,
  doc,
  getDocs,
  getDoc,
  addDoc,
  setDoc,
  updateDoc,
  arrayUnion,
  deleteDoc,
  query,
  where,
  limit,
  arrayRemove,
} from "firebase/firestore";

let initialState = {
  document: null,
  isPending: false,
  error: null,
  success: null,
};

const firestoreReducer = (state, action) => {
  switch (action.type) {
    case "IS_PENDING":
      return { isPending: true, document: null, success: false, error: null };
    case "ADDED_BLOG":
      return {
        isPending: false,
        document: action.payload,
        success: true,
        error: null,
      };
    case "ADDED_AUTHOR":
      return {
        isPending: false,
        document: action.payload,
        success: true,
        error: null,
      };
    case "ADDED_KEY":
      return {
        isPending: false,
        document: action.payload,
        success: true,
        error: null,
      };
    case "UPDATED_BLOG":
      return {
        isPending: false,
        document: action.payload,
        success: true,
        error: null,
      };
    case "UPDATED_AUTHOR":
      return {
        isPending: false,
        document: action.payload,
        success: true,
        error: null,
      };
    case "DELETED_BLOG":
      return {
        isPending: true,
        document: null,
        success: action.payload,
        error: null,
      };
    case "ERROR":
      return {
        isPending: false,
        document: null,
        success: false,
        error: action.payload,
      };
    default:
      return state;
  }
};

export const useFirestore = () => {
  const { user } = useAuthContext();

  const [response, dispatch] = useReducer(firestoreReducer, initialState);
  const [isCancelled, setIsCancelled] = useState(false);

  const usersDoc = doc(db, "users", user.uid);
  const blogsCollection = collection(usersDoc, "blogs");
  const authorsCollection = collection(usersDoc, "authors");
  const keysCollection = collection(usersDoc, "keys");

  const dispatchIfNotCancelled = (action) => {
    if (!isCancelled) {
      dispatch(action);
    }
  };

  const locateDoc = async (collection, queryRules) => {
    let q = query(collection, where(...queryRules), limit(1));
    const doc = await getDocs(q, limit(1));
    return doc;
  };

  const getDocRefOrData = async (coll, id) => {
    const docRef = doc(coll, id);
    const docSnap = await getDoc(docRef);
    const docData = docSnap.data();
    return {
      docRef,
      docData,
    };
  };

  const checkIfAuthorExists = async (blog) => {
    dispatch({ type: "IS_PENDING" });

    try {
      let isNewAuthor;
      let authorDocRef;
      let queryRules = ["name", "==", blog.author];
      const authorDoc = await locateDoc(authorsCollection, queryRules);

      // update authorDoc & return updated authorDocRef
      if (authorDoc.docs.length > 0) {
        console.log("author exists");
        isNewAuthor = false;

        const authorDocID = authorDoc.docs[0].id;
        authorDocRef = doc(authorsCollection, authorDocID);

        await updateAuthor(authorDocRef, blog);
      }
      // add authorDoc & return new authorDocRef
      else {
        console.log("author does not exist");
        isNewAuthor = true;

        authorDocRef = await addAuthor(blog);
        console.log(authorDocRef);
      }
      return { isNewAuthor, authorDocRef };
    } catch (err) {
      dispatchIfNotCancelled({ type: "ERROR", payload: err.message });
    }
  };

  const checkIfKeyExists = async (blog, blogDocRef, authorDocRef) => {
    dispatch({ type: "IS_PENDING" });

    const authorDocID = authorDocRef.id;
    const authorDocSnap = await getDoc(authorDocRef);
    const authorDocData = authorDocSnap.data();

    try {
      let booksWithIDs = { [blog.title]: blogDocRef.id };

      let queryRules = ["author", "==", authorDocData.name];
      const keyDoc = await locateDoc(keysCollection, queryRules);

      if (keyDoc.docs.length > 0) {
        console.log("key exists");
        const keyDocID = keyDoc.docs[0].id;
        const keyDocRef = doc(keysCollection, keyDocID);

        await updateKey(keyDocRef, booksWithIDs);
      } else {
        console.log("key does NOT exist");
        await setKey(authorDocID, authorDocData, booksWithIDs);
      }
    } catch (err) {
      dispatchIfNotCancelled({ type: "ERROR", payload: err.message });
    }
  };

  // add a document
  const addBlog = async (blog) => {
    dispatch({ type: "IS_PENDING" });

    try {
      const addedBlog = await addDoc(blogsCollection, {
        ...blog,
      });

      dispatchIfNotCancelled({
        type: "ADDED_BLOG",
        payload: addedBlog,
      });
      return addedBlog;
    } catch (err) {
      dispatchIfNotCancelled({ type: "ERROR", payload: err.message });
    }
  };

  const addAuthor = async (blog) => {
    dispatch({ type: "IS_PENDING" });

    let author = {
      name: blog.author,
      aboutAuthor: "",
      booksWritten: [blog.title],
    };

    try {
      const addedAuthor = await addDoc(authorsCollection, { ...author });

      dispatchIfNotCancelled({
        type: "ADDED_AUTHOR",
        payload: addedAuthor,
      });
      return addedAuthor;
    } catch (err) {
      dispatchIfNotCancelled({ type: "ERROR", payload: err.message });
    }
  };

  const setKey = async (authorDocID, authorDocData, booksWithIDs) => {
    dispatch({ type: "IS_PENDING" });

    let key = {
      author: authorDocData.name,
      authorID: authorDocID,
      aboutAuthor: authorDocData.aboutAuthor,
      booksWithIDs: [booksWithIDs],
    };
    try {
      console.log(key);
      const addedKey = await setDoc(doc(usersDoc, "keys", authorDocID), {
        ...key,
      });

      dispatchIfNotCancelled({
        type: "ADDED_KEY",
        payload: addedKey,
      });
      return addedKey;
    } catch (err) {
      dispatchIfNotCancelled({ type: "ERROR", payload: err.message });
    }
  };

  const updateKey = async (keyDocRef, booksWithIDs) => {
    try {
      const updatedKey = await updateDoc(
        keyDocRef,
        { booksWithIDs: arrayUnion(booksWithIDs) },
        { merge: true }
      );

      dispatchIfNotCancelled({
        type: "UPDATED_KEY",
        payload: updatedKey,
      });
      return keyDocRef;
    } catch (err) {
      dispatchIfNotCancelled({ type: "ERROR", payload: err.message });
    }
  };

  const updateAuthor = async (authorDocRef, blog) => {
    try {
      const updatedAuthor = await updateDoc(
        authorDocRef,
        { booksWritten: arrayUnion(blog.title) },
        { merge: true }
      );

      dispatchIfNotCancelled({
        type: "UPDATED_AUTHOR",
        payload: updatedAuthor,
      });
      return authorDocRef;
    } catch (err) {
      dispatchIfNotCancelled({ type: "ERROR", payload: err.message });
    }
  };

  const updateData = async (updatedData) => {
    try {
      const { isNewAuthor, authorDocRef } = await checkIfAuthorExists(
        updatedData
      );

      let prevAuthorID = updatedData.authorID;
      let updatedAuthorID = authorDocRef.id;

      const { docRef: prevBlogDocRef, docData: prevBlogDocData } =
        await getDocRefOrData(blogsCollection, updatedData.id);

      const { docData: authorDocData } = await getDocRefOrData(
        authorsCollection,
        updatedAuthorID
      );
      console.log(authorDocData);

      const { docRef: prevKeyDocRef, docData: prevKeyDocData } =
        await getDocRefOrData(keysCollection, prevAuthorID);

      let prevKeyTitle = { [prevBlogDocData.title]: prevBlogDocRef.id };
      let newKeyTitle = { [updatedData.title]: prevBlogDocRef.id };

      if (prevBlogDocData.title !== updatedData.title) {
        console.log("Book title has been changed.");

        // Condition 1: Title Changes & Author Name Changes:
        if (prevBlogDocData.author !== updatedData.author) {
          console.log("Author name has been changed.");
          changeAuthorName(
            authorDocRef,
            updatedData,
            prevBlogDocData,
            prevBlogDocRef
          );
          changeKeyData(
            prevKeyDocRef,
            prevKeyDocData,
            prevKeyTitle,
            newKeyTitle
          );
        }
        // Condition 2: Title Changes & Author Name DOES NOT Change:
        else {
          console.log("Author name has NOT been changed.");

          const updatedBlog = await updateDoc(prevBlogDocRef, updatedData);
          dispatchIfNotCancelled({
            type: "UPDATED_BLOG",
            payload: updatedBlog,
          });

          let updatedAuthor = await updateDoc(authorDocRef, {
            booksWritten: arrayRemove(prevBlogDocData.title),
          });
          updatedAuthor = await updateDoc(authorDocRef, {
            booksWritten: arrayUnion(updatedData.title),
          });
          dispatchIfNotCancelled({
            type: "UPDATED_AUTHOR",
            payload: updatedAuthor,
          });

          let updatedKey = await updateDoc(prevKeyDocRef, {
            booksWithIDs: arrayRemove(prevKeyTitle),
          });
          updatedKey = await updateDoc(prevKeyDocRef, {
            booksWithIDs: arrayUnion(newKeyTitle),
          });
          dispatchIfNotCancelled({
            type: "UPDATED_KEY",
            payload: updatedKey,
          });
        }
      } else {
        console.log("Book title has NOT been changed.");
        // Condition 3: Title DOES NOT Change & Author Name Changes:
        if (prevBlogDocData.author !== updatedData.author) {
          console.log("Author name has been changed.");
          console.log(`Is this new author?: ${isNewAuthor}`);
          changeAuthorName(
            authorDocRef,
            updatedData,
            prevBlogDocData,
            prevBlogDocRef,
            authorDocRef,
            authorDocData,
            isNewAuthor
          );
        }

        // Condition 4: Title DOES NOT Change & Author Name DOES NOT Change:
        else {
          console.log("Author name has NOT been changed.");
          const updatedBlog = await updateDoc(prevBlogDocRef, updatedData);
          dispatchIfNotCancelled({
            type: "UPDATED_BLOG",
            payload: updatedBlog,
          });
        }
      }
    } catch (err) {
      dispatchIfNotCancelled({ type: "ERROR", payload: err.message });
    }
  };

  const changeKeyData = async (
    prevKeyDocRef,
    prevKeyDocData,
    prevKeyTitle,
    newKeyTitle,
    updatedData,
    updatedAuthorID,
    authorDocData
  ) => {
    // Condition 3a: is this a new author:
    let isNewAuthor = null;
    let queryRules = ["author", "==", updatedData.author];
    const existingKeyDoc = await locateDoc(keysCollection, queryRules);

    if (existingKeyDoc.docs.length > 0) {
      isNewAuthor = false;
      const { docRef: existingKeyDocRef } = getDocRefOrData(
        existingKeyDoc.docs[0].id
      );
      let updatedKey = await updateDoc(existingKeyDocRef, {
        booksWithIDs: arrayUnion(prevKeyTitle),
      });
    } else {
      isNewAuthor = true;
      let newKey = await setKey(updatedAuthorID, authorDocData, newKeyTitle);
    }
    // Condition 3b: author has written multiple books
    // delete previous key because either authorName changed or title changed
    if (prevKeyDocData.booksWithIDs.length > 1) {
      let updatedPrevKey = await updateDoc(prevKeyDocRef, {
        booksWithIDs: arrayRemove(prevKeyTitle),
      });
      dispatchIfNotCancelled({
        type: "UPDATED_KEY",
        payload: updatedPrevKey,
      });
    }
    // Condition 3b: author has only written the book being edited
    else {
      await deleteDoc(prevKeyDocRef);
    }
  };

  const changeAuthorName = async (
    authorDocRef,
    updatedData,
    prevBlogDocData,
    prevBlogDocRef,
    prevAuthorDocRef,
    prevAuthorDocData
  ) => {
    let updatedAuthorID = authorDocRef.id;

    // Condition 3a: is this a new author:
    let isNewAuthor = null;
    let queryRules = ["name", "==", updatedData.author];
    const existingAuthorDoc = await locateDoc(authorsCollection, queryRules);

    if (existingAuthorDoc.docs.length > 0) {
      console.log("hey");
      isNewAuthor = false;
      const existingAuthorDocID = existingAuthorDoc.docs[0].id;
      const existingAuthorDocRef = doc(authorsCollection, existingAuthorDocID);
      let updatedAuthor = await updateDoc(existingAuthorDocRef, {
        booksWritten: arrayUnion(prevBlogDocData.title),
      });
    }
    // else {
    //   isNewAuthor = true;
    //   let newAuthor = await setKey(updatedAuthorID, authorDocData, newKeyTitle);
    // }
    // Condition 3a: author has written multiple books
    console.log(prevAuthorDocData);
    if (prevAuthorDocData.booksWritten.length > 1) {
      let updatedPrevAuthor = await updateDoc(prevAuthorDocRef, {
        booksWritten: arrayRemove(prevBlogDocData.title),
      });
      dispatchIfNotCancelled({
        type: "UPDATED_AUTHOR",
        payload: updatedPrevAuthor,
      });
    }
    // Condition 3b: author has only written the book being edited
    else {
      await deleteDoc(prevAuthorDocRef);
    }

    // give blog doc new authorID:
    const updatedBlog = await updateDoc(prevBlogDocRef, {
      ...updatedData,
      authorID: updatedAuthorID,
    });
    dispatchIfNotCancelled({
      type: "UPDATED_BLOG",
      payload: updatedBlog,
    });
  };

  const deleteBlog = async (blog) => {
    dispatch({ type: "IS_PENDING" });
    console.log(response);
    const blogDoc = doc(blogsCollection, blog.id);

    try {
      await deleteDoc(blogDoc);

      dispatchIfNotCancelled({
        type: "DELETED_BLOG",
        payload: true,
      });
    } catch (err) {
      dispatchIfNotCancelled({ type: "ERROR", payload: err.message });
    }
  };

  useEffect(() => {
    return () => setIsCancelled(true);
  }, []);

  return {
    checkIfAuthorExists,
    checkIfKeyExists,
    addBlog,
    addAuthor,
    updateData,
    deleteBlog,
    response,
    dispatch,
    dispatchIfNotCancelled,
  };
};

  ------------------

    const changeAuthorName = async (
    authorDocRef,
    updatedData,
    blogDocData,
    blogDocRef,
    prevAuthorDocRef,
    prevAuthorDocData
  ) => {
    let updatedAuthorID = authorDocRef.id;

    // const prevAuthorDocRef = doc(authorsCollection, updatedData.authorID);
    // const prevAuthorDocSnap = await getDoc(prevAuthorDocRef);
    // const prevAuthorDocData = prevAuthorDocSnap.data();

    // Condition 3a: author has written multiple books
    console.log(prevAuthorDocData);
    if (prevAuthorDocData.booksWritten.length > 1) {
      let updatedPrevAuthor = await updateDoc(prevAuthorDocRef, {
        booksWritten: arrayRemove(blogDocData.title),
      });
      dispatchIfNotCancelled({
        type: "UPDATED_AUTHOR",
        payload: updatedPrevAuthor,
      });
    }
    // Condition 3b: author has only written the book being edited
    else {
      await deleteDoc(prevAuthorDocRef);
    }

    // give blog doc new authorID:
    const updatedBlog = await updateDoc(blogDocRef, {
      ...updatedData,
      authorID: updatedAuthorID,
    });
    dispatchIfNotCancelled({
      type: "UPDATED_BLOG",
      payload: updatedBlog,
    });
  };

-----------------

  const checkIfAuthorExists = async (blog) => {
    dispatch({ type: "IS_PENDING" });

    try {
      let queryRules = ["name", "==", blog.author];
      const authorDoc = await locateDoc(authorsCollection, queryRules);

      // update authorDoc & return updated authorDocRef
      if (authorDoc.docs.length > 0) {
        console.log("author exists");

        const authorDocID = authorDoc.docs[0].id;
        const authorDocRef = doc(authorsCollection, authorDocID);

        await updateAuthor(authorDocRef, blog);
        return authorDocRef;
      }
      // add authorDoc & return new authorDocRef
      else {
        console.log("author does not exist");

        const authorDocRef = await addAuthor(blog);
        console.log(authorDocRef);
        return authorDocRef;
      }
    } catch (err) {
      dispatchIfNotCancelled({ type: "ERROR", payload: err.message });
    }
  };

/////////////
Condition 1: Title Changes & Author Name Changes:
  1. Is this a newAuthor?
    Yes - 
      newAuthor generates newKey with newAuthorID ->
        newAuthorName
        newAuthorID
        prevAboutAuthor ???
        [{newBookTitle: newBookID}] 
    No - 
      add newKeyData to existingAuthorKey with existingAuthorKeyID ->
        arrayUnion([{newBookTitle: newBookID}])
        confirm: merge prevAboutAuthor with existingAboutAuthor?
          Yes - 
            merge prevAboutAuthor with existingAboutAuthor
          No - 
            do not merge prevAboutAuthor data
  2. Was prevBookTitle the only book prevAuthor wrote?
    Yes -
      delete prevKey
    No -
      arrayRemove(prevKey)

Condition 2: Title Changes & Author Name DOES NOT Change:
  1. replace prevKey data
    arrayRemove( [{prevBookTitle: prevBookID}] )
    arrayUnion([{newBookTitle: prevBookID}])
Condition 3: Title DOES NOT Change & Author Name Changes:
  1. Is this a newAuthor?
    Yes - 
      newAuthor generates newKey with newAuthorID ->
        newAuthorName
        newAuthorID
        [{prevBookTitle: prevBookID}] 

        confirm: keep prevAboutAuthor with newAboutAuthor? 
          Yes - 
            add prevAboutAuthor
          No -
            add empty string
    No - 
      add newKeyData to existingAuthorKey with existingAuthorKeyID ->
        arrayUnion([{prevBookTitle: prevBookID}])
        confirm: merge prevAboutAuthor with existingAboutAuthor?
          Yes - 
            merge prevAboutAuthor with existingAboutAuthor
          No - 
            do not merge prevAboutAuthor data
  2. Was prevBookTitle the only book prevAuthor wrote?
    Yes -
      delete prevKey
    No -
      arrayRemove(prevKey)
Condition 4: Title DOES NOT Change & Author Name DOES NOT Change:
  if aboutAuthor changed, 
    add to newKeyData
  else 
    do nothing




    /////////////////////// nav ////////////
    // styles:
import styles from "./Navbar.module.css";

import { useLogout } from "../../hooks/useLogout";
import { useAuthContext } from "../../hooks/useAuthContext";

import { NavLink } from "react-router-dom";
import { useState } from "react";
import MobileNavMenu from "./MobileNavMenu";

export default function Navbar() {
  const { logout, isPending } = useLogout();
  const { user } = useAuthContext();
  const [toggleMenu, setToggleMenu] = useState(false);
  console.log(window.screen.width);
  console.log(toggleMenu);

  const openMenu = () => {
    if (toggleMenu) {
      setToggleMenu(false);
    } else {
      setToggleMenu(true);
    }
  };

  return (
    <nav>
      <ul>
        {!user && (
          <div className={styles["admin-tabs"]}>
            <li>
              <NavLink className={styles["admin-tab"]} to="/signup">
                Sign Up
              </NavLink>
            </li>
            <li>
              <NavLink className={styles["admin-tab"]} to="/login">
                Log In
              </NavLink>
            </li>
          </div>
        )}

        {user &&
          (window.screen.width > 509 ? (
            <>
              <li>
                <NavLink
                  className={`${styles.section} ${styles["create-tab"]}`}
                  to="/create"
                >
                  Add Blog
                </NavLink>
              </li>

              <div className={`${styles.middle} ${styles.section}`}>
                <li>
                  <NavLink className={styles["nav-tab"]} to="/AllBlogs">
                    Blogs
                  </NavLink>
                </li>
                <li>
                  <NavLink className={styles["nav-tab"]} to="/AllAuthors">
                    Authors
                  </NavLink>
                </li>
                <li>
                  <NavLink
                    className={styles["nav-tab"]}
                    to="/browse"
                    state={{ from: false }}
                  >
                    Browse
                  </NavLink>
                </li>
              </div>

              {!isPending ? (
                <li className={`${styles.section} ${styles.logout}`}>
                  <button onClick={logout}>
                    <span>
                      Logout,<br></br>
                      {user.displayName}?
                    </span>
                  </button>
                </li>
              ) : (
                <li className={`${styles.section} ${styles.logout}`}>
                  <button disabled>Logging Out...</button>
                  <p className={styles["user-name"]}>{user.displayName}?</p>
                </li>
              )}
            </>
          ) : (
            <div className={styles["mobile-nav-container"]}>
              <button onClick={() => openMenu()}>Navigation</button>
              {toggleMenu && <MobileNavMenu user={user} logout={logout} />}
            </div>
          ))}
      </ul>
    </nav>
  );
}

/////////////////////

// styles:
import styles from "../../components/css/Card.module.css";

import { ReactComponent as DateContainer } from "../../assets/DateContainer.svg";
import EditButton from "../../assets/EditButton";
import BoltIcon from "../../assets/BoltIcon.png";

import { Link, useNavigate } from "react-router-dom";

import { useFirestore } from "../../hooks/useFirestore";
import { useEffect, useState } from "react";

export default function BlogCard({ blog, isSingleBlog }) {
  const { deleteBlog, response, error } = useFirestore();
  const [ratingArray, setRatingArray] = useState([]);
  const [blogSnips, setBlogSnips] = useState([]);
  const [showDelete, setShowDelete] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    if (blog) {
      let ratings = [];
      for (let i = 1; i < 6; i++) {
        ratings.push(i);
      }
      setRatingArray(ratings);
      const reg = /\n/;
      setBlogSnips(blog.content.split(reg));
    }
  }, [blog]);

  const handleDelete = async (blog) => {
    if (isSingleBlog) {
      await deleteBlog(blog);
      if (!response.error) {
        navigate("/");
      }
    } else {
      await deleteBlog(blog);
    }
  };

  return (
    <div className={styles.card}>
      <div className={styles["content-box"]}>
        <div className={styles["top-container"]}>
          <div className={`${styles["card-col"]} ${styles["card-col-1"]}`}>
            <div className={`${styles["card-line"]} ${styles["title-line"]}`}>
              <div className={styles["title-edit"]}>
                <h1>
                  <Link className={styles.title} to={`/blogDetails/${blog.id}`}>
                    {blog.title}
                  </Link>
                </h1>
                <Link to={`/editBlog/${blog.id}`}>
                  <EditButton className={styles.edit} />
                </Link>
              </div>

              {blog.dateStarted && (
                <div
                  className={`${styles["card-line"]} ${styles["date-container"]}`}
                >
                  <DateContainer />
                  {/* <div className={styles["date-started"]}>
                    <p className={styles["date-label"]}>Started:</p>
                    {blog.formatStart ? (
                      <p className={styles["date-value"]}>{blog.formatStart}</p>
                    ) : (
                      <p className={styles["date-value"]}>{blog.dateStarted}</p>
                    )}
                  </div> */}
                </div>
              )}

              {/* {blog.rating && (
                <div className={styles.rating}>
                  {ratingArray.map((rating) => (
                    <div key={rating}>
                      <img
                        className={styles["rating-icon"]}
                        alt="A number of lightening bolts indicating the rating."
                        src={BoltIcon}
                      />
                    </div>
                  ))}
                </div>
              )} */}
            </div>

            {blog.author && (
              <div
                className={`${styles["card-line"]} ${styles["author-line"]}`}
              >
                <p className={styles.author}>by</p>
                <Link
                  className={styles["author-link"]}
                  to={`/authorDetails/${blog.authorID}`}
                >
                  {blog.author}
                </Link>
              </div>
            )}

            {blog.dateStarted && (
              <div
                className={`${styles["card-line"]} ${styles["date-container"]}`}
              >
                <div className={styles["date-started"]}>
                  <p className={styles["date-label"]}>Started:</p>
                  {blog.formatStart ? (
                    <p className={styles["date-value"]}>{blog.formatStart}</p>
                  ) : (
                    <p className={styles["date-value"]}>{blog.dateStarted}</p>
                  )}
                </div>

                <div className={styles["date-finished"]}>
                  <p className={styles["date-label"]}>Finished:</p>
                  <div>
                    {blog.dateFinished === "" && <p>Currently Reading</p>}
                    {blog.formatFinish ? (
                      <p className={styles["date-value"]}>
                        {blog.formatFinish}
                      </p>
                    ) : (
                      <p className={styles["date-value"]}>
                        {blog.dateFinished}
                      </p>
                    )}
                  </div>
                </div>
              </div>
            )}

            {blog.tags && (
              <div className={`${styles["card-line"]} ${styles.tags}`}>
                {blog.tags.length === 0 ? (
                  <p className={styles["tags-value"]}>No Tags.</p>
                ) : (
                  blog.tags.map((tag) => (
                    <p key={tag} className={styles["tags-value"]}>
                      <Link
                        key={tag}
                        className={styles.tag}
                        state={{ from: tag }}
                        to={`/browse`}
                      >
                        {tag}
                      </Link>
                    </p>
                  ))
                )}
              </div>
            )}
          </div>
        </div>
        {blog.content && (
          <div className={`${styles["card-line-full"]} ${styles["content"]}`}>
            {blogSnips.map((snip) => (
              <p className={styles.snippet} key={Math.random() * 300}>
                {snip}
              </p>
            ))}
          </div>
        )}
        {showDelete === true ? (
          <>
            <p className="delete delete-message">
              Are you sure you would like to delete this blog permanently?
            </p>
            <div className="confirm-del-container">
              <button
                className="delete-confirmed"
                onClick={() => handleDelete(blog)}
              >
                Yes, delete this blog
              </button>
              <button className="cancel" onClick={() => setShowDelete(false)}>
                Cancel
              </button>
            </div>
          </>
        ) : (
          <button className="delete" onClick={() => setShowDelete(true)}>
            DELETE?
          </button>
        )}
      </div>
      {/* make sure this error works! */}
      {error && <p className="error">{error}</p>}
    </div>
  );
}


//////////////////

.card {
  display: flex;
  flex-direction: column;

  color: var(--extra-text);

  padding: 16px 0px 8px 0px;

  margin: auto;

  max-width: 900px;
}

.title-line a,
.author-line a {
  color: var(--primary-accent);
}
.rating {
  display: flex;
  flex-direction: row;
}
.rating-icon {
  background: var(--primary-accent);
  border-radius: 24px;
  margin-right: 0.2em;
}

.content-box {
  background: var(--secondary-bg);
  color: var(--primary-accent);

  margin: auto;
  /* max-width: 700px;
  min-width: 694px; */

  border: 1px solid var(--primary-text);
  border-radius: 24px;
}

.content-box:first-of-type {
  margin-top: 2px;
}

.top-container {
  display: flex;
  padding: 20px 20px 10px 20px;
}

.card-col-1 {
  flex: 2;
}

.card-col-2 {
  flex: 1;
  display: flex;
  justify-content: flex-end;
}

.card-line {
  display: flex;
  flex-flow: row wrap;
  flex-basis: 50%;
  margin-bottom: 8px;
}
.title-line {
  justify-content: space-between;
  align-items: top;
}

.title-line,
.author-line {
  /* align-items: end; */
}

.title {
  font-size: 60px;
  font-family: "Estonia", cursive;
  letter-spacing: 0.01em;
  margin-right: 0.2em;
}

.title-edit {
  display: flex;
  flex-direction: row;
}

.author {
  padding-left: 16px;
  padding-right: 8px;
  font-size: 30px;
}

.author-link {
  font-size: 30px;
  margin-right: 0.4em;
}
.blog-link {
  color: rgb(214, 149, 84);
  font-size: 40px;
  word-spacing: -0.08em;
  font-family: "Estonia", cursive;
}
.books-written-container {
  display: flex;
  /* flex-direction: column; */
}
.blog-container {
  display: flex;
  /* flex-basis: 50%; */
  justify-content: space-between;
}
.list-item {
  margin: 2px;
  list-style-type: none;
  padding-right: 12px;
}

.edit {
  max-width: 0.2em;
  max-height: 20px;
  margin: 0px 10px;
}
.rating-icon {
  max-width: 28px;
}

.date-container {
  display: flex;
  justify-content: space-between;
}
.date-value {
  padding: 0px 0px 2px 16px;
}
.date-started {
  z-index: 2;
  color: black;
}

.tags {
  align-items: center;
  justify-content: space-between;
}
.tags-value {
  padding: 0.6em 0.8em;
  /* border: 1px solid var(--primary-accent); */
  border-radius: 24px;
  background: var(--primary-bg);
}
.tag {
  color: var(--primary-text);
}

.content {
  background: var(--light-primary-bg);
  color: var(--lightest-primary-bg);

  border-top: 3px solid var(--primary-accent);
  border-bottom: 3px solid var(--primary-accent);
  border-right: 3px solid var(--primary-bg);
  border-left: 3px solid var(--primary-bg);

  padding: 0.8em 1.2em;

  font-family: "Dosis", sans-serif;
  font-size: 1.3em;

  text-align: left;
  line-height: 1.2em;
  letter-spacing: 0.05em;
}

.snippet {
  text-indent: 24px;
  padding-bottom: 2px;
}

.about-author :not(p:first-child) {
  text-indent: 30px;
}

/* -------------------- PC Styles ---------------- */
/* @media only screen and (min-width: 900px) {
  .card {
    max-width: 400px;
    min-width: 694px;
  }
} */

/* -------------------- Tablet Styles ---------------- */
@media only screen and (min-width: 510px) and (max-width: 700px) {
  .card {
    max-width: 700px;
    min-width: 510px;
    border: 2px solid rgb(255, 0, 115);
  }
  /* header a {
    width: 100%;
    max-width: 700px;
    min-width: 510px;
  } */
}
/* ------------------- Mobile Styles ----------------- */
/* @media only screen and (max-width: 405px) {
  .card-content-box {
    width: 400px;
  }
} */

----------------------------------------------------------------

// styles:
import styles from "../../components/css/Card.module.css";

// import { ReactComponent as DateContainer } from "../../assets/DateContainer.svg";
// import DateContainer from "../../assets/DateContainer";

import EditButton from "../../assets/EditButton";
import BoltIcon from "../../assets/BoltIcon.png";

import { Link, useNavigate } from "react-router-dom";

import { useFirestore } from "../../hooks/useFirestore";
import { useEffect, useState } from "react";

export default function BlogCard({ blog, isSingleBlog }) {
  const { deleteBlog, response, error } = useFirestore();
  const [ratingArray, setRatingArray] = useState([]);
  const [blogSnips, setBlogSnips] = useState([]);
  const [showDelete, setShowDelete] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    if (blog) {
      // setting up specific ratings:
      let ratings = [];
      for (let i = 1; i < blog.rating; i++) {
        ratings.push(i);
      }
      setRatingArray(ratings);

      // creating paragraphs:
      const reg = /\n/;
      console.log(blog);
      setBlogSnips(blog.content.split(reg));
    }
  }, [blog]);

  const handleDelete = async (blog) => {
    if (isSingleBlog) {
      await deleteBlog(blog);
      if (!response.error) {
        navigate("/");
      }
    } else {
      await deleteBlog(blog);
    }
  };

  return (
    <div className={styles.card}>
      <div className={styles["all-card-content"]}>
        <div className={styles["before-ratings"]}>
          <div className={`${styles["card-col"]} ${styles["card-col-1"]}`}>
            <div className={styles["before-tags"]}>
              <div>
                <div className={styles["title-edit"]}>
                  <h1>
                    <Link
                      className={styles.title}
                      to={`/blogDetails/${blog.id}`}
                    >
                      {blog.title}
                    </Link>
                  </h1>
                  <Link to={`/editBlog/${blog.id}`}>
                    <EditButton className={styles.edit} />
                  </Link>
                </div>

                {blog.author && (
                  <div className={styles["author-line"]}>
                    <Link
                      className={styles["author-link"]}
                      to={`/authorDetails/${blog.authorID}`}
                    >
                      {blog.author}
                    </Link>
                  </div>
                )}
              </div>

              {blog.dateStarted && (
                <div className={styles["date-container"]}>
                  <div className={styles["date-started"]}>
                    {/* <p className={styles["date-label"]}>Started:</p> */}
                    {blog.formatStart ? (
                      <p className={styles["date-value"]}>{blog.formatStart}</p>
                    ) : (
                      <p className={styles["date-value"]}>{blog.dateStarted}</p>
                    )}
                  </div>
                  <div> - </div>

                  <div className={styles["date-finished"]}>
                    {/* <p className={styles["date-label"]}>Finished:</p> */}
                    <div>
                      {blog.dateFinished === "" && (
                        <p className={styles["currently-reading"]}>
                          Currently Reading
                        </p>
                      )}
                      {blog.formatFinish ? (
                        <p className={styles["date-value"]}>
                          {blog.formatFinish}
                        </p>
                      ) : (
                        <p className={styles["date-value"]}>
                          {blog.dateFinished}
                        </p>
                      )}
                    </div>
                  </div>
                </div>
              )}
            </div>
            {blog.tags && (
              <div className={styles.tags}>
                {blog.tags.length === 0 ? (
                  <p className={styles["tags-value"]}>No Tags.</p>
                ) : (
                  blog.tags.map((tag) => (
                    <p key={tag} className={styles["tags-value"]}>
                      <Link
                        key={tag}
                        className={styles.tag}
                        state={{ from: tag }}
                        to={`/browse`}
                      >
                        {tag}
                      </Link>
                    </p>
                  ))
                )}
              </div>
            )}
          </div>
        </div>

        {blog.rating && (
          <div className={styles.rating}>
            {}
            {ratingArray.map((rating) => (
              <div key={rating}>
                <img
                  className={styles["rating-icon"]}
                  alt="A number of lightening bolts indicating the rating."
                  src={BoltIcon}
                />
              </div>
            ))}
          </div>
        )}
        {blog.content && (
          <div className={`${styles["card-line-full"]} ${styles["content"]}`}>
            {blogSnips.map((snip) => (
              <p className={styles.snippet} key={Math.random() * 300}>
                {snip}
              </p>
            ))}
          </div>
        )}

        {/* ------------------------------------------------------------- */}
        {showDelete === true ? (
          <div className="delete-container">
            <p className="delete delete-message">
              Are you sure you would like to delete this blog permanently?
            </p>
            <div className="confirm-del-container">
              <button
                className="delete-confirmed"
                onClick={() => handleDelete(blog)}
              >
                Delete
              </button>
              <button className="cancel" onClick={() => setShowDelete(false)}>
                Cancel
              </button>
            </div>
          </div>
        ) : (
          <div className="delete-container">
            <button className="delete" onClick={() => setShowDelete(true)}>
              DELETE POST
            </button>
          </div>
        )}
      </div>
      {/* make sure this error works! */}
      {error && <p className="error">{error}</p>}
    </div>
  );
}

==========================================
.card {
  display: flex;
  flex-direction: column;

  color: var(--extra-text);

  padding: 16px 0px 8px 0px;

  margin: auto;

  max-width: 800px;
}

.all-card-content {
  min-width: 800px;
  background: var(--dark-primary-bg);
  color: var(--primary-accent);

  margin: auto;
  /* max-width: 700px;
  min-width: 694px; */

  border-top: 4px double var(--primary-accent);
  border-bottom: 4px double var(--primary-accent);
  border-radius: 24px;
}

.all-card-content:first-of-type {
  margin-top: 2px;
}

.before-ratings {
  display: flex;
  /* flex-flow: row wrap; */
  padding: 20px 20px 10px 20px;
}

.card-col-1 {
  flex: 2;
}

.before-tags,
.date-container,
.tags {
  display: flex;
  flex-flow: row wrap;
  flex-basis: 50%;
  margin-bottom: 8px;
}
.before-tags {
  justify-content: space-between;
  align-items: center;
  border: 1px solid lightskyblue;
}

.before-tags a {
  color: var(--primary-accent);
}
.before-tags a:hover {
  color: var(--light-primary-accent);
}
.title {
  font-size: 40px;
  font-family: "Inknut Antiqua", serif;
  letter-spacing: 0.01em;
  margin-right: 0.2em;
  border: 1px solid rgb(250, 250, 135);
}

.title-edit {
  display: flex;
  flex-direction: row;
  margin: 12px 24px;
}

.author-line {
  margin: 12px 32px;
  border: 1px solid rgb(135, 250, 206);
}

.author-link {
  font-size: 30px;
  margin-top: 100px;
}
.blog-link {
  color: rgb(214, 149, 84);
  font-size: 40px;
  word-spacing: -0.08em;
}
.books-written-container {
  display: flex;
  /* flex-direction: column; */
}
.blog-container {
  display: flex;
  /* flex-basis: 50%; */
  justify-content: space-between;
}
.list-item {
  margin: 2px;
  list-style-type: none;
  padding-right: 12px;
}

.edit {
  max-width: 0.2em;
  max-height: 20px;
  margin: 0px 10px;
}

/* ---------------------- Dates --------------- */
/* .book-stack,
.relative-parent {
  display: flex;
  justify-content: center;
}
.book-stack {
  border: 1px solid rgb(46, 117, 139);
}
.testing-element,
.books {
  border: 20px solid rgb(82, 139, 46);
}
.relative-parent {
  border: 1px solid seagreen;
  position: relative;
  height: auto;
  width: auto;
} 

.date-value {
  align-self: center; 
  padding: 0px 0px 2px 16px;
  position: absolute;
  z-index: 2;
  color: black;
}
#start-date {
  border: 100px solid cornflowerblue;
  color: aqua;
  bottom: 84px;
  left: 80px;
}
.finish {
  bottom: 52px;
  left: 60px;
}
.start {
  border: 10px solid cornflowerblue;
  bottom: 84px;
  left: 80px;
}
*/

.date-container {
  display: flex;
  flex-direction: column;
  border: 1px solid rgb(206, 156, 239);
  padding: 8px;
}
.date-container div {
  display: flex;
  justify-content: center;
}
.currently-reading {
  color: var(--lightest-primary-bg);
}

/* ---------------------- Tags --------------- */

.tags {
  align-items: center;
  justify-content: space-between;
}
.tags-value {
  padding: 0.6em 0.8em;
  /* border: 1px solid var(--primary-accent); */
  border-radius: 24px;
  background: var(--light-primary-bg);
  font-family: "Josefin Slab", serif;
  font-weight: 600;

  border-top: 2px solid var(--primary-accent);
  border-bottom: 2px solid var(--primary-accent);
}
.tag {
  color: var(--lightest-primary-bg);
}

.content {
  background: var(--light-primary-bg);
  color: var(--lightest-primary-bg);

  /* border-top: 3px solid var(--primary-accent); */
  /* border-bottom: 3px solid var(--primary-accent);
  border-right: 3px solid var(--primary-bg);
  border-left: 3px solid var(--primary-bg); */

  padding: 1.2em 4em;

  font-family: "Josefin Slab", serif;
  font-size: 1.3em;
  font-weight: 600;

  text-align: left;
  line-height: 1.4em;
}

.snippet {
  text-indent: 24px;
  padding-bottom: 2px;
}

.about-author :not(p:first-child) {
  text-indent: 30px;
}

/* -------------------- Bottom Bar ---------------- */

.rating {
  display: flex;
  flex-direction: row;
  /* justify-content: center; */

  justify-content: space-around;
  background: var(--primary-accent);
}

.rating > div {
  display: flex;
  /* background: var(--light-primary-bg); */
  align-items: center;
}
.rating-icon {
  border-radius: 24px;
  margin-right: 1em;
  max-width: 28px;

  /* border: 2px solid var(--secondary-bg);
  border-left: none; */
}
/* .rating-icon {
  background: var(--primary-accent);
  border-radius: 24px;
  margin-right: 0.2em;
  max-width: 28px;
} */

/* -------------------- PC Styles ---------------- */
/* @media only screen and (min-width: 900px) {
  .card {
    max-width: 400px;
    min-width: 694px;
  }
} */

/* -------------------- Tablet Styles ---------------- */
@media only screen and (min-width: 510px) and (max-width: 700px) {
  .card {
    max-width: 700px;
    min-width: 510px;
    border: 2px solid rgb(255, 0, 115);
  }
  /* header a {
    width: 100%;
    max-width: 700px;
    min-width: 510px;
  } */
}
/* ------------------- Mobile Styles ----------------- */
/* @media only screen and (max-width: 405px) {
  .card-all-card-content {
    width: 400px;
  }
} */
